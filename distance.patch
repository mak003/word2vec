--- distance.c	2018-09-20 13:19:11.609985585 +0900
+++ distance_io.c	2018-09-20 13:19:45.189835645 +0900
@@ -17,11 +17,13 @@
 #include <math.h>
 #include <malloc.h>
 
+
 const long long max_size = 2000;         // max length of strings
-const long long N = 40;                  // number of closest words that will be shown
+const long long N = 50;                  // number of closest words that will be shown
 const long long max_w = 50;              // max length of vocabulary entries
 
 int main(int argc, char **argv) {
+  FILE *fp,*fp1;
   FILE *f;
   char st1[max_size];
   char *bestw[N];
@@ -31,7 +33,7 @@
   char ch;
   float *M;
   char *vocab;
-  if (argc < 2) {
+  if (argc < 4) {
     printf("Usage: ./distance <FILE>\nwhere FILE contains word projections in the BINARY FORMAT\n");
     return 0;
   }
@@ -65,20 +67,39 @@
     for (a = 0; a < size; a++) M[a + b * size] /= len;
   }
   fclose(f);
+
+  fp = fopen (argv[2],"r");
+  if (fp == NULL) {
+	  printf("open file failed\n");
+	  return -1;
+   }
+
+  fp1 = fopen (argv[3], "w");
+  if (fp1 == NULL) {
+	  printf ("file can't be opened\n");
+	  return -1;
+   }
+
   while (1) {
     for (a = 0; a < N; a++) bestd[a] = 0;
     for (a = 0; a < N; a++) bestw[a][0] = 0;
-    printf("Enter word or sentence (EXIT to break): ");
+//  printf("Enter word or sentence (EXIT to break): ");
     a = 0;
     while (1) {
-      st1[a] = fgetc(stdin);
-      if ((st1[a] == '\n') || (a >= max_size - 1)) {
+     // st1[a] = fgetc(stdin);
+        st1[a] = fgetc(fp);
+        if ((st1[a] == '\n') || (a >= max_size - 1)) {
         st1[a] = 0;
         break;
       }
+        if(st1[a] == EOF) {
+     // strcpy(st1,"EXIT");
+        break;
+	    }
       a++;
-    }
-    if (!strcmp(st1, "EXIT")) break;
+     }
+
+ // if (!strcmp(st1, "EXIT")) break;
     cn = 0;
     b = 0;
     c = 0;
@@ -137,6 +158,13 @@
       }
     }
     for (a = 0; a < N; a++) printf("%50s\t\t%f\n", bestw[a], bestd[a]);
-  }
+
+  fprintf(fp1, "%s", &st1[0]);
+  for (a = 0; a < N; a++) fprintf(fp1, ",%s,%f", bestw[a], bestd[a]);
+  fprintf(fp1, "\n");
+
+ }
+  fclose(fp);
+  fclose(fp1);
   return 0;
 }
